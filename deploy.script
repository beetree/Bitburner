var file = args[0];
var ram = args[1];

print("Deploying " + file + " to all servers, and (re)starting servers with ram " + ram);

//servers = getPurchasedServers();
//print(servers);
//deleteServer("player-server-0-0");


hosts = ["home"];

for(var i = 0; i < hosts.length; i++) {
  newHosts = scan(hosts[i]);
  for(var j = 0; j < newHosts.length; j++) {
    if( (hosts.includes(newHosts[j]) == false) && (newHosts[j] != "home") && (newHosts[j].substring(0, 13) != "player-server") ) {
      hosts.push(newHosts[j]);
    }
  }
}

hosts.shift(); //Remove first element "home"


for(var i = 0; i < hosts.length; i++) {
  server = hosts[i];
  print(server);

  if(getServerNumPortsRequired(server) <= 1) {
    print("Deploying...");
    if(hasRootAccess(server) == false) {
      if(fileExists("BruteSSH.exe", "home")) {
        brutessh(server);
      }
      nuke(server);
    }
    scp(file, server);
    killall(server);
    maxScript = Math.floor(getServerMaxRam(server)/getScriptRam(file));
    exec(file, server, maxScript);

  } else {
    print("Too high security, skipping...");
  }
  

}


print("Moving on to buying / upsizing servers...");
for(var i = 0; i < 25; i++) {
  server = "player-server-" + i;
  print(server);
  if(serverExists(server) == false) {
    print("Server does not exist: " + server);
    while(getServerMoneyAvailable("home") < getPurchasedServerCost(ram)) {
      print("Not enough money to purchase server, sleeping...");
      sleep(5000);
    }
    print("Buying server")
    purchaseServer(server, ram);
  } else {
    print("Server exists: " + server);
    if(getServerMaxRam(server) == ram) {
      print("Server has correct amount of ram, killing processes (for restart)");
      killall(server);
    } else {
      print("Server has wrong amount of ram, deleting");
      killall(server);
      deleteServer(server);
      while(getServerMoneyAvailable("home") < getPurchasedServerCost(ram)) {
        print("Not enough money to purchase server, sleeping...");
        sleep(5000);
      }
      print("Buying server")
      purchaseServer(server, ram);
    }
  }
  scp(file, server);
  maxScript = Math.floor(getServerMaxRam(server)/getScriptRam(file));
  exec(file, server, maxScript);      
}

while(true);
